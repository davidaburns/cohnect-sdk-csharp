// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CohnectSDK.Buffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RequestPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RequestPacket GetRootAsRequestPacket(ByteBuffer _bb) { return GetRootAsRequestPacket(_bb, new RequestPacket()); }
  public static RequestPacket GetRootAsRequestPacket(ByteBuffer _bb, RequestPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RequestPacketBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "V001"); }
  public static bool VerifyRequestPacket(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("V001", false, RequestPacketVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RequestPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Uuid(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int UuidLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUuidBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUuidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUuidArray() { return __p.__vector_as_array<byte>(4); }
  public CohnectSDK.Buffers.RequestOp Opcode { get { int o = __p.__offset(6); return o != 0 ? (CohnectSDK.Buffers.RequestOp)__p.bb.GetUshort(o + __p.bb_pos) : CohnectSDK.Buffers.RequestOp.GET; } }
  public ushort Length { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public byte Body(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int BodyLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBodyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBodyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBodyArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<CohnectSDK.Buffers.RequestPacket> CreateRequestPacket(FlatBufferBuilder builder,
      VectorOffset uuidOffset = default(VectorOffset),
      CohnectSDK.Buffers.RequestOp opcode = CohnectSDK.Buffers.RequestOp.GET,
      ushort length = 0,
      VectorOffset bodyOffset = default(VectorOffset)) {
    builder.StartTable(4);
    RequestPacket.AddBody(builder, bodyOffset);
    RequestPacket.AddUuid(builder, uuidOffset);
    RequestPacket.AddLength(builder, length);
    RequestPacket.AddOpcode(builder, opcode);
    return RequestPacket.EndRequestPacket(builder);
  }

  public static void StartRequestPacket(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUuid(FlatBufferBuilder builder, VectorOffset uuidOffset) { builder.AddOffset(0, uuidOffset.Value, 0); }
  public static VectorOffset CreateUuidVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUuidVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUuidVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUuidVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUuidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddOpcode(FlatBufferBuilder builder, CohnectSDK.Buffers.RequestOp opcode) { builder.AddUshort(1, (ushort)opcode, 0); }
  public static void AddLength(FlatBufferBuilder builder, ushort length) { builder.AddUshort(2, length, 0); }
  public static void AddBody(FlatBufferBuilder builder, VectorOffset bodyOffset) { builder.AddOffset(3, bodyOffset.Value, 0); }
  public static VectorOffset CreateBodyVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBodyVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBodyVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBodyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBodyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<CohnectSDK.Buffers.RequestPacket> EndRequestPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CohnectSDK.Buffers.RequestPacket>(o);
  }
  public static void FinishRequestPacketBuffer(FlatBufferBuilder builder, Offset<CohnectSDK.Buffers.RequestPacket> offset) { builder.Finish(offset.Value, "V001"); }
  public static void FinishSizePrefixedRequestPacketBuffer(FlatBufferBuilder builder, Offset<CohnectSDK.Buffers.RequestPacket> offset) { builder.FinishSizePrefixed(offset.Value, "V001"); }
  public RequestPacketT UnPack() {
    var _o = new RequestPacketT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RequestPacketT _o) {
    _o.Uuid = new List<byte>();
    for (var _j = 0; _j < this.UuidLength; ++_j) {_o.Uuid.Add(this.Uuid(_j));}
    _o.Opcode = this.Opcode;
    _o.Length = this.Length;
    _o.Body = new List<byte>();
    for (var _j = 0; _j < this.BodyLength; ++_j) {_o.Body.Add(this.Body(_j));}
  }
  public static Offset<CohnectSDK.Buffers.RequestPacket> Pack(FlatBufferBuilder builder, RequestPacketT _o) {
    if (_o == null) return default(Offset<CohnectSDK.Buffers.RequestPacket>);
    var _uuid = default(VectorOffset);
    if (_o.Uuid != null) {
      var __uuid = _o.Uuid.ToArray();
      _uuid = CreateUuidVector(builder, __uuid);
    }
    var _body = default(VectorOffset);
    if (_o.Body != null) {
      var __body = _o.Body.ToArray();
      _body = CreateBodyVector(builder, __body);
    }
    return CreateRequestPacket(
      builder,
      _uuid,
      _o.Opcode,
      _o.Length,
      _body);
  }
}

public class RequestPacketT
{
  public List<byte> Uuid { get; set; }
  public CohnectSDK.Buffers.RequestOp Opcode { get; set; }
  public ushort Length { get; set; }
  public List<byte> Body { get; set; }

  public RequestPacketT() {
    this.Uuid = null;
    this.Opcode = CohnectSDK.Buffers.RequestOp.GET;
    this.Length = 0;
    this.Body = null;
  }
  public static RequestPacketT DeserializeFromBinary(byte[] fbBuffer) {
    return RequestPacket.GetRootAsRequestPacket(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RequestPacket.FinishRequestPacketBuffer(fbb, RequestPacket.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RequestPacketVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Uuid*/, 1 /*byte*/, false)
      && verifier.VerifyField(tablePos, 6 /*Opcode*/, 2 /*CohnectSDK.Buffers.RequestOp*/, 2, false)
      && verifier.VerifyField(tablePos, 8 /*Length*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Body*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
